package resolv

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/h-fam/errdiff"
)

const (
	singleNameserver = `
# This file was automatically generated by WSL. To stop automatic generation of this file, add the following entry to /etc/wsl.conf:
# [network]
# generateResolvConf = false
nameserver 1.1.1.1
`
	multiNameserver = `
# This file was automatically generated by WSL. To stop automatic generation of this file, add the following entry to /etc/wsl.conf:
# [network]
# generateResolvConf = false
nameserver 1.1.1.1
nameserver 8.8.8.8
`
)

func TestResolv(t *testing.T) {
	tests := []struct {
		desc    string
		in      string
		want    *ResolveConfig
		wantErr bool
	}{{
		desc: "single generated nameserver",
		in:   singleNameserver,
		want: &ResolveConfig{
			NameServers: []string{"1.1.1.1"},
		},
	}, {
		desc: "list generated nameserver",
		in:   multiNameserver,
		want: &ResolveConfig{
			NameServers: []string{"1.1.1.1", "8.8.8.8"},
		},
	}}
	for _, tt := range tests {
		t.Run(tt.desc, func(t *testing.T) {
			p := NewParser(bytes.NewBuffer([]byte(tt.in)))
			r, err := p.Parse()
			if s := errdiff.Check(err, tt.wantErr); s != "" {
				t.Fatalf("unexpected error: %s", s)
			}
			if err != nil {
				return
			}
			if !reflect.DeepEqual(r, tt.want) {
				t.Fatalf("Parse() failed: got %v, want %v", r, tt.want)
			}
		})
	}
}
